{"version":3,"sources":["components/ContactsForm/ContactsForm.styled.jsx","components/ContactsForm/ContactsForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/App/App.styled.jsx","components/App/App.jsx","index.js"],"names":["AddForm","styled","form","ContactsInput","input","ContactsButton","button","ContactsForm","state","name","number","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","id","type","onChange","pattern","title","required","Component","ContactsList","ul","ListItem","li","ButtonDelete","ContactList","contacts","onDeleteContact","map","onClick","FilterContact","Filter","Container","div","App","filter","addContact","contact","deleteContact","contactId","prevState","getVisibleContacts","normalizedFilter","toLowerCase","length","includes","changeFilter","e","target","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17caa919.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\nexport const AddForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\nexport const ContactsInput = styled.input`\r\n  margin-bottom: 15px;\r\n`;\r\nexport const ContactsButton = styled.button`\r\n  background-color: #2e8b57;\r\n  padding: 8px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  color: #ffffff;\r\n  font-size: 16px;\r\n`;\r\n","import propTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport { AddForm, ContactsInput, ContactsButton } from \"./ContactsForm.styled\";\r\n\r\nexport class ContactsForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = (event) => {\r\n    const { name, number, value } = event.currentTarget;\r\n    this.setState({ [name]: value, [number]: value });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <AddForm onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Name:\r\n            <ContactsInput\r\n              id={this.nameInputId}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n          <label>\r\n            Number:\r\n            <ContactsInput\r\n              id={this.numberInputId}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n          <ContactsButton type=\"submit\">Add contact</ContactsButton>\r\n        </AddForm>\r\n      </>\r\n    );\r\n  }\r\n}\r\nContactsForm.propTypes = {\r\n  addContact: propTypes.func.isRequired,\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const ContactsList = styled.ul`\r\n  list-style: none;\r\n  width: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  margin: 0 auto;\r\n`;\r\nexport const ListItem = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 350px;\r\n  border: 2px solid #2e8b57;\r\n  border-radius: 15px;\r\n  padding: 10px;\r\n  background-color: #9acd32;\r\n  margin-bottom: 10px;\r\n`;\r\nexport const ButtonDelete = styled.button`\r\n  background-color: #2e8b57;\r\n  padding: 8px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  color: #ffffff;\r\n  font-size: 16px;\r\n`;\r\n","import propTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { ContactsList, ListItem, ButtonDelete } from \"./ContactList.styled\";\r\n\r\nexport const ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ContactsList>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <ListItem key={id}>\r\n          <span>{name}</span>\r\n          <span>{number}</span>\r\n          <ButtonDelete type=\"button\" onClick={() => onDeleteContact(id)}>\r\n            Delete\r\n          </ButtonDelete>\r\n        </ListItem>\r\n      ))}\r\n    </ContactsList>\r\n  );\r\n};\r\nContactList.propTypes = {\r\n  contacts: propTypes.array.isRequired,\r\n  onDeleteContact: propTypes.func.isRequired,\r\n};\r\n","import styled from \"@emotion/styled\";\r\nexport const FilterContact = styled.input`\r\n  margin-bottom: 15px;\r\n`;\r\n","import propTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { FilterContact } from \"./Filter.styled\";\r\nexport const Filter = ({ onChange }) => {\r\n  return (\r\n    <>\r\n      <p>Find contacts by name: </p>\r\n      <FilterContact type=\"text\" name=\"filter\" onChange={onChange} />\r\n    </>\r\n  );\r\n};\r\nFilter.propTypes = {\r\n  onChange: propTypes.func.isRequired,\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\n  height: auto;\r\n  width: 650px;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  padding: 50px;\r\n  border: 2px solid #008000;\r\n  border-radius: 5px;\r\n  background-color: #00ff7f;\r\n`;\r\n","import { Component } from \"react\";\nimport { ContactsForm } from \"../ContactsForm/ContactsForm\";\nimport { ContactList } from \"../ContactList/ContactList\";\nimport { Filter } from \"../Filter/Filter\";\nimport { Container } from \"./App.styled\";\nimport shortid from \"shortid\";\n\nexport class App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n  addContact = ({ name, number }) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    if (contacts.length) {\n      return contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n  };\n  changeFilter = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  render() {\n    const visibleContacts = this.getVisibleContacts();\n    const { contacts } = this.state;\n    return (\n      <Container>\n        <ContactsForm onSubmit={this.addContact} />\n        <h2>Contacts</h2>\n        {contacts.length > 1 && <Filter onChange={this.changeFilter} />}\n        {contacts.length ? (\n          <ContactList\n            contacts={visibleContacts}\n            onDeleteContact={this.deleteContact}\n          />\n        ) : (\n          <p>There are no contacts here</p>\n        )}\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './components/App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}